// Generated by view binder compiler. Do not edit!
package com.example.e_finance.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.e_finance.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FamilymemberItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button action;

  @NonNull
  public final ConstraintLayout layout1;

  @NonNull
  public final TextView memberid;

  @NonNull
  public final TextView membername;

  @NonNull
  public final View view1;

  private FamilymemberItemBinding(@NonNull ConstraintLayout rootView, @NonNull Button action,
      @NonNull ConstraintLayout layout1, @NonNull TextView memberid, @NonNull TextView membername,
      @NonNull View view1) {
    this.rootView = rootView;
    this.action = action;
    this.layout1 = layout1;
    this.memberid = memberid;
    this.membername = membername;
    this.view1 = view1;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FamilymemberItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FamilymemberItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.familymember_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FamilymemberItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.action;
      Button action = ViewBindings.findChildViewById(rootView, id);
      if (action == null) {
        break missingId;
      }

      id = R.id.layout1;
      ConstraintLayout layout1 = ViewBindings.findChildViewById(rootView, id);
      if (layout1 == null) {
        break missingId;
      }

      id = R.id.memberid;
      TextView memberid = ViewBindings.findChildViewById(rootView, id);
      if (memberid == null) {
        break missingId;
      }

      id = R.id.membername;
      TextView membername = ViewBindings.findChildViewById(rootView, id);
      if (membername == null) {
        break missingId;
      }

      id = R.id.view1;
      View view1 = ViewBindings.findChildViewById(rootView, id);
      if (view1 == null) {
        break missingId;
      }

      return new FamilymemberItemBinding((ConstraintLayout) rootView, action, layout1, memberid,
          membername, view1);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
